#!/usr/bin/env perl

use strict;
use warnings;
use URI;
use URI::QueryParam;
use File::Which;

sub throw_error {
    my ($message) = @_;
    if (which('zenity')) {
        $message =~ s/'/\\'/g;  # Escape single quotes
        system("zenity", "--error", "--text=$message");
    } else {
        print "ERROR: $message\n";
    }
    exit 1;
}

sub url_decode {
    my ($string) = @_;
    $string =~ s/\+/%20/g;
    return uri_unescape($string);
}

sub main {
    # Check if sshpass is installed
    if (!which('sshpass')) {
        throw_error("Error: sshpass is not installed. Please install sshpass to run this script.");
    }

    my $url = shift @ARGV;
    unless (defined $url) {
        print("Usage: $0 <url>\n");
        exit 1;
    }

    # fix :/// -> ://
     $url =~ s{:///*}{://}g;

    # Tidy-up URL with (out) In/Complete Credentials
    $url = uri_unescape($url) if $url =~ /%[0-9A-Fa-f]{2}/;

    my $uri_parts = URI->new($url);

    # Extract components from URI
    my $protocolHandler = $uri_parts->scheme || '';
    my $auth = $uri_parts->userinfo || '';
    my $user = $uri_parts->user || '';
    my $password = $uri_parts->password || '';
    my $host = $uri_parts->host || '';
    my $port = $uri_parts->port || 22;  # Default port
    my $path = $uri_parts->path || '';

    my $ssh_cmd = sprintf(
       "/usr/bin/sshpass -p '%s' %s -o StrictHostKeyChecking=no -p %d %s",
       $password,
       $protocolHandler,
       $port,
       $auth ? "$auth\@$host" : $host
    );

    # Execute the command
    print "Executing $ssh_cmd";
    system($ssh_cmd) == 0 or throw_error("Error executing $ssh_cmd");
}

# Call the main function
main();
