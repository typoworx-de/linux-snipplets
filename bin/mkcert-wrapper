#!/bin/bash
_DIR=$(dirname $0);
_CERTDIR='/etc/ssl/self-signed';
_CAROOT="${_CERTDIR}";

_MKCERT_RELEASE='v1.4.1';

ARCH=`uname -m`
if [ ${ARCH} == 'x86_64' ]; then
  ARCH='amd64';
fi

if [[ ! -f "${_DIR}/mkcert-linux-${ARCH}" ]];
then
  echo "Downloading mkcert-binary ${_DIR}/mkcert-linux-${ARCH}";
  wget -q -O "${_DIR}/mkcert-linux-${ARCH}" "https://github.com/FiloSottile/mkcert/releases/download/${_MKCERT_RELEASE}/mkcert-${_MKCERT_RELEASE}-linux-${ARCH}" || {
    echo "Error downloading mkcert-binary version ${_MKCERT_RELEASE} for arch ${ARCH}";
    exit 1;
  }
fi

MKCERT_BIN=$(realpath "${_DIR}/mkcert-linux-${ARCH}");

if [ ! -x ${MKCERT_BIN} ];
then
  echo "Missing executable permission. Trying to fix ...";
  chmod +x ${MKCERT_BIN} || exit 1;
fi

if [[ $@ = *'-cert-file'* ]];
then
  $MKCERT_BIN $@
  exit $?
fi

if [[ "$@" = *-help* ]];
then
  ${MKCERT_BIN} -help;
  exit $?;
elif  [[ "$@" = *-install* ]];
then
  sudo ${MKCERT_BIN} -install;
  exit $?;
elif  [[ "$@" = *-uninstall* ]];
then
  sudo ${MKCERT_BIN} -uninstall;
  exit $?;
fi

declare -a DOMAINS=();
for ((i=0;i < $#;i++))
{
#  The following if would make the command "certbot" compatible
#  if [[ "${!i}" == "-d" ]];
#  then
    n=$((i+1));
    DOMAINS+=("${!n}");
#  fi
}

if [[ -z ${DOMAINS#} ]];
then
  ${MKCERT_BIN} -help;
  exit $?;
fi


CERTNAME='';
if [[ "${DOMAINS[@]}" = *"*."* ]];
then
  CERTNAME='_wildcard.'$(expr match "${DOMAINS[0]}" '.*\.\(.*\..*\)')
else
  CERTNAME=$(expr match "${DOMAINS[0]}" '.*\.\(.*\..*\)')
fi

test -d "${_CERTDIR}/${CERTNAME}" || sudo mkdir -p "${_CERTDIR}/${CERTNAME}" || exit 1;
(cd ${_CERTDIR}/${CERTNAME}; CAROOT="${_CAROOT}" sudo ${MKCERT_BIN} -cert-file "${_CERTDIR}/${CERTNAME}/${CERTNAME}.pem" "${DOMAINS[@]}");

# Clean-Up
rm -f "${_CERTDIR}/${CERTNAME}-key".* 1> /dev/null 2>&1;
